[{"title":"Nginx与php结合","url":"/2019/01/25/Nginx与php结合/","content":"\n<hr>\n\n###### 1. 配置 Nginx 使其支持 PHP 应用\n\n`$ vim /usr/local/nginx/conf/nginx.conf`，修改默认的 location 块，使其支持 .php 文件：\n\n```nginx\nlocation / {\n    root   html;\n    index  index.php index.html index.htm;\n}\n```","tags":["nginx","php"],"categories":["nginx"]},{"title":"hexo的认知","url":"/2019/01/25/hexo的认知/","content":"\n<hr>\n\n### 预览：\n1. 自定义文章模板\n2. 加入 `<script>`\n3. 加入全局样式\n4. hexo 内置全局变量\n5. 如何打印全局变量\n\n\n#### 1. 自定义文章模板\n> \\themes\\landscape\\layout\\_partial\\after-footer.ejs\n\n#### 2. 加入 `<script>`\n> \\scaffolds\\post.md\n\n#### 3. 加入全局样式\n> \\my\\themes\\landscape\\source\\css\\style.styl\n\n#### 4. hexo 内置全局变量\n> [https://hexo.io/zh-cn/docs/variables](https://hexo.io/zh-cn/docs/variables)\n\n#### 5. 如何打印全局变量\n打开任意一个ejs文件如：`my\\themes\\landscape\\layout\\_partial\\article.ejs`，顶部加入JavaScript代码：\n```ejs\n<% \n\tconsole.log(20190125172431, post) \n%>\n```\n不过并不会打印到页面，而是打印到控制台。\n\n![console.log](hexo的认知/1.png)\n\n","tags":["hexo"],"categories":["hexo"]},{"title":"网页无法播放MP4的解决方案","url":"/2019/01/25/网页无法播放MP4的解决方案/","content":"\n<hr>\n\n### 操作预览：\n1. 下载 `格式工厂`\n2. 选择 MP4 导入你需要转换的视频\n3. 右键列表中的视频选择 `输出配置`，选择 `视频编辑：AVC（H264）`\n4. 点击开始\n\n![网页无法播放MP4的解决方案](/1.png)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n    #myVideo {\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 0;\n        z-index: 199307100337;\n    }\n    </style>\n</head>\n\n<body>\n    <video autoplay loop muted id=\"myVideo\">\n        <source src=\"./saber.mp4\" type=\"video/mp4\">\n    </video>\n</body>\n</html>\n```\n\n![saber.mp4](网页无法播放MP4的解决方案/2.png)","tags":["MP4","video","HTML"],"categories":["HTML","video","MP4"]},{"title":"Centos7 PHP-lastest 安装","url":"/2019/01/25/php安装/","content":"\n<hr>\n\n参考官方 UNIX 编译教程： [http://php.net/manual/zh/install.unix.php](http://php.net/manual/zh/install.unix.php)\n\n###### 1、安装依赖\n```bash\n$ sudo yum install libxml2 libxml2-devel\n```\n###### 2、下载php（China）: http://php.net/get/php-7.3.1.tar.gz/from/a/mirror\n```bash\n$ wget -O php-7.3.1.tar.gz http://cn2.php.net/get/php-7.3.1.tar.gz/from/this/mirror\n```\n###### 3、检查配置是否健康\n```bash\n$ ./configure --disable-fileinfo --enable-fpm --enable-so --with-mysql \n```\n\n加入--disable-fileinfo是为了避免make时出现如下错误：\n> virtual memory exhausted: Cannot allocate memory \n> make: *** [ext/fileinfo/libmagic/apprentice.lo] Error 1\n\n其中 `--enable-fpm` 是支持fpm扩展nginx，`--enable-so` 是支持apache，`--with-mysql` 是支持mysql\n\n###### 4、make 编译\n```bash\n$ make\n```\n###### 5、make 安装\n```bash\n$ sudo make install\n```\n\n安装完成之后，会出现如下提示语：\n\n> Wrote PEAR system config file at: /usr/local/etc/pear.conf\n> You may want to add: /usr/local/lib/php to your php.ini include_path\n> /home/dc2-user/php-7.3.1/build/shtool install -c ext/phar/phar.phar /usr/local/bin\n> ln -s -f phar.phar /usr/local/bin/phar\n> Installing PDO headers:           /usr/local/include/php/ext/pdo/\n\n请放心这是正常的，实际上此时你的php已经安装成功了：\n```bash\n$ php -v\n\nPHP 7.3.1 (cli) (built: Jan 24 2019 21:37:18) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.1, Copyright (c) 1998-2018 Zend Technologies\n```\n\n###### 6、创建配置文件，并将其复制到正确的位置。\n```bash\n$ sudo cp php.ini-development /usr/local/php/php.ini\n$ sudo cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf\n$ sudo cp sapi/fpm/php-fpm /usr/local/bin\n```\n\n接下来你可能想要了解：\n- nginx 与 php 结合使用\n- nginx 与 apache 结合使用","tags":["centos","PHP"],"categories":["centos","PHP"]},{"title":"Centos7 依赖全家桶","url":"/2019/01/24/Centos7依赖全家桶/","content":"\n<hr>\n\n该文收集我安装 Centos7 环境中所有依赖的第三方包。只需要执行以下一句代码即可：\n```bash\n$ sudo yum install \\\ngcc-c++ \\\nzlib-devel \\\npcre-devel \\\nlibxml2 \\\nlibxml2-devel \\\nyum-utilsdevice-mapper-persistent-data \\\nlvm2 \\\nyum-utils \\\n```","tags":["centos","yum"],"categories":["centos"]},{"title":"Centos7 Nodejs 安装","url":"/2019/01/24/Nodejs安装/","content":"\n<hr>\n\n### 操作预览\n1. 下载nodejs： https://nodejs.org/en/download/\n2. 检查配置是否健康\n3. make 编译（大概需要半小时）\n4. 安装（root）\n5. 验证\n\n###### 1. 下载nodejs： https://nodejs.org/en/download/\n```bash\n$ wget https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz\n```\n\n###### 2. 检查配置是否健康\n```bash\n$ ./configure\n```\n\n###### 3. make 编译（大概需要半小时）\n```bash\n$ make\n```\n\n###### 4. 安装（root）\n```bash\n$ sudo make install\n```\n\n###### 5. 验证安装是否成功\n```bash\n$ node -v \nv10.15.0\n```","tags":["centos","Nodejs"],"categories":["centos","Nodejs"]},{"title":"centos7 nginx 安装","url":"/2019/01/24/nginx安装/","content":"\n<hr>\n\n### 操作预览：\n1. 安装依赖\n2. 下载nginx ： http://nginx.org/en/download.html\n3. 解压\n4. 检查配置是否健康\n5. 开始安装\n6. 检查是否安装成功，默认安装目录是在/usr/local/nginx\n7. 启动nginx服务\n8. 查看服务是否开启\n9. 使用 `$ curl localhost` 查看 nginx 欢迎页 \n\n//////////////////////////////////////////////\n\n\n##### 1、安装依赖\n```bash\n$ yum -y install gcc-c++ zlib-devel pcre-devel\n```\n\n##### 2、下载nginx ： http://nginx.org/en/download.html\n```bash\n$ wget http://nginx.org/download/nginx-1.15.8.tar.gz\n```\n\n##### 3、解压\n```bash\n$ tar zxvf nginx-1.15.8.tar.gz\n```\n\n//////////////////////////////////////////////\n\n##### 4、检查配置是否健康\n```bash\n$ ./configure\n```\n\n##### 5、开始安装\n```bash\n$ make && make install\n```\n\n//////////////////////////////////////////////\n\n##### 6、检查是否安装成功，默认安装目录是在/usr/local/nginx\n```bash\n$ /usr/local/nginx/sbin/nginx -t\n\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n```\n\n##### 7、启动nginx服务\n```bash\n$ /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n```\n\n//////////////////////////////////////////////\n\n##### 8、查看服务是否开启\n```bash\n$ ps -ef | grep nginx\n```\n\n##### 9、使用 `$ curl localhost` 查看 nginx 欢迎页 \n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\n![Welcome to nginx!](nginx安装/1.png)","tags":["centos","nginx"],"categories":["centos","nginx"]},{"title":"Centos 7 Docker 安装","url":"/2019/01/24/Docker安装/","content":"\n### 操作预览：\n1.  安装一些基本依赖软件\n2.  为了使用 yum-config-manager 需要先安装一下 yum-utils\n3.  设置稳定版仓库\n4.  更新仓库（可选）\n5.  查看所有仓库中所有docker版本（可选）\n6.  正式下载安装\n7.  启动 (并开机启动)\n8.  检查是否安装成功\n\n////////////////////////////////////////////// \n前戏准备 \n//////////////////////////////////////////////\n\n\n###### 1、安装一些基本依赖软件\n```bash\n$ sudo yum install -y yum-utilsdevice-mapper-persistent-data lvm2\n```\n\n###### 2、为了使用 yum-config-manager 需要先安装一下这个 yum-utils\n```bash\n$ sudo yum -y install yum-utils\n```\n\n###### 3、设置稳定版仓库\n```bash\n$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n###### 4、更新仓库（可选）\n```bash\n$ sudo yum-config-manager --enable docker-ce-edge\n```\n\n////////////////////////////////////////////// \n正式开始 \n//////////////////////////////////////////////\n\n\n###### 5、查看所有仓库中所有docker版本（可选）\n```bash\n$ sudo yum list docker-ce --showduplicates | sort -r\n```\n\n###### 6、正式下载安装\n```bash\n$ sudo yum install docker-ce -y\n```\n\n###### 7、启动 (并开机启动)\n```bash\n$ sudo systemctl start docker\n$ sudo systemctl enable docker\n```\n\n###### 8、检查是否安装成功\n```bash\n$ docker -v\n```\n\n![Docker version 18.09.1](Docker安装/1.png)","tags":["centos","docker"],"categories":["docker"]},{"title":"Laravel Eloquent 入门","url":"/2019/01/20/laravel-Eloquent/","content":"\n# 一、数据建模\n\n创建一个名为 `Article` 的 Eloquent Model，Laravel 会自动将其与 Article 数据表关联。\n\n```php\n$ php artisan make:model Article\n```\n\n![\\app\\Article.php](laravel-Eloquent/1.png)\n\n<hr>\n\n# 二、tinker 命令行交互\n\n输入以下命令进入交互模式：\n\n```bash\n$ php artisan tinker\n```\n\n#### 示例 1 - Model与插入数据：\n\n```bash\n>>> $article = new App\\Article;\n=> App\\Article {#2909}\n\n>>> $article->title='My first Title';\n=> \"My first Title\"\n\n>>> $article->content='content'\n=> \"content\"\n\n>>> $article->published_at=Carbon\\Carbon::now();\n=> Carbon\\Carbon @1547995347 {#2913\n     date: 2019-01-20 14:42:27.721241 UTC (+00:00),\n   }\n\n>>> $article;\n=> App\\Article {#2909\n     title: \"My first Title\",\n     content: \"content\",\n     published_at: Carbon\\Carbon @1547995347 {#2913\n       date: 2019-01-20 14:42:27.721241 UTC (+00:00),\n     },\n   }\n\n>>> $article->save();\n=> true\n>>>\n```\n\n代码说明：\n- `$article = new App\\Article` ： 新建一个 Article Model；\n- `$article->title='My first Title'`：填充title字段；\n- `$article->content='content'`：填充content字段；\n- `$article->published_at=Carbon\\Carbon::now()`： 使用 `Carbon\\Carbon` 时间库来获取并设置当前时间；\n- `$article`：打印出当前的Model；\n- `$article->save()`：保存到数据库，如果返回true则表示成功；\n\n![Article Model](laravel-Eloquent/3.png)\n\n![Successful！！](laravel-Eloquent/2.png)\n\n\n也可以使用 `$article->toArray()` 打印出 Model 信息：\n```bash\n>>> $article->toArray()\n=> [\n     \"title\" => \"My first Title\",\n     \"content\" => \"content\",\n     \"published_at\" => Carbon\\Carbon @1547995347 {#2913\n       date: 2019-01-20 14:42:27.721241 UTC (+00:00),\n     },\n     \"updated_at\" => \"2019-01-20 14:43:05\",\n     \"created_at\" => \"2019-01-20 14:43:05\",\n     \"id\" => 1,\n   ]\n>>>\n```\n\n#### 示例 2 - 查找数据\n\n查找刚刚插入 `id` 为 **1** 的数据：\n\n```bash\n>>> $data = App\\Article::find(1);\n=> App\\Article {#2924\n     id: 1,\n     title: \"My first Title\",\n     content: \"content\",\n     published_at: \"2019-01-20 14:42:27\",\n     created_at: \"2019-01-20 14:43:05\",\n     updated_at: \"2019-01-20 14:43:05\",\n     introl: \"\",\n   }\n>>>\n```\n\n也可以使用 `App\\Article::all()` 方法无条件查找所有数据：\n\n```bash\n>>> $data=App\\Article::all()\n\n=> Illuminate\\Database\\Eloquent\\Collection {#2924\n     all: [\n       App\\Article {#2906\n         id: 1,\n         title: \"My first Title\",\n         content: \"content\",\n         published_at: \"2019-01-20 14:42:27\",\n         created_at: \"2019-01-20 14:43:05\",\n         updated_at: \"2019-01-20 14:43:05\",\n         introl: \"\",\n       },\n     ],\n   }\n>>>\n\n\n```\n\n#### 示例 3 - 更新数据\n\n和插入很相似，依然是使用 `save()` 方法：\n\n```bash\n>>> $data->title=\"Update\";\n=> \"Update\"\n\n>>> $data->save();\n=> true\n>>>\n```\n\n#### 示例 4 - where 查询\n\n```bash\n>>> $data=App\\Article::where('content', '=', 'content')->get()\n\n=> Illuminate\\Database\\Eloquent\\Collection {#2911\n     all: [\n       App\\Article {#2929\n         id: 1,\n         title: \"Update\",\n         content: \"content\",\n         published_at: \"2019-01-20 23:02:45\",\n         created_at: \"2019-01-20 14:43:05\",\n         updated_at: \"2019-01-20 15:02:45\",\n         introl: \"\",\n       },\n     ],\n   }\n>>>\n\n```\n\n`get()` 方法代表获取所有行，返回的是一个Collection数据类型。可以理解为一个加强版的数组。\n\n通常我们只想返回一条数据，那么可以使用 `first()` 方法，它只会直接返回一个对象：\n\n```bash\n>>> $data=App\\Article::where('content', '=', 'content')->first()\n\n=> App\\Article {#2910\n     id: 1,\n     title: \"Update\",\n     content: \"content\",\n     published_at: \"2019-01-20 23:02:45\",\n     created_at: \"2019-01-20 14:43:05\",\n     updated_at: \"2019-01-20 15:02:45\",\n     introl: \"\",\n   }\n\n>>> $data->title\n=> \"Update\"\n```\n\n#### 示例 5 - `create()` / `update()` \n\n使用 `App\\Article::create([...])` 和 `$model->udate([...])` 可以更便捷的创建和更新数据。\n\n先来 `\\app\\Article.php` 中添加代码，设置字段允许被填充：\n\n```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    protected $fillable = ['title', 'content', 'published_at'];\n}\n```\n\n**必须重新进入命令行交互！！**\n**必须重新进入命令行交互！！**\n**必须重新进入命令行交互！！**\n\n使用 `App\\Article::create([...])` 来创建数据：\n\n```bash\n>>> $article=App\\Article::create(['title'=>'Second Title', 'content'=>'Second Content', 'published_at'=>Carbon\\Carbon::now() ]);\n\n=> App\\Article {#2913\n     title: \"Second Title\",\n     content: \"Second Content\",\n     published_at: Carbon\\Carbon @1547998078 {#2923\n       date: 2019-01-20 15:27:58.713977 UTC (+00:00),\n     },\n     updated_at: \"2019-01-20 15:27:58\",\n     created_at: \"2019-01-20 15:27:58\",\n     id: 2,\n   }\n>>>\n\n```\n\n使用 `$model->udate([...])` 来更新数据：\n\n```bash\n>>> $article->update(['title'=>'Change Title']);\n=> true\n```\n","tags":["php","laravel"],"categories":["php","laravel"]},{"title":"Laravel Mysql 数据库配置 与 Migration 基础","url":"/2019/01/20/laravel-migration/","content":"\n# 一、MySql 数据库配置\n\n先来配置一下数据库，打开 Laravel 的环境配置 `\\.env` 文件，简单配置你的数据库信息：\n\n```\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=root\nDB_PASSWORD=root\n```\n\n再打开数据库配置文件 `\\config\\database.php`，检查当前的 Mysql 数据库配置：\n\n```php\n<?php\n\n'default' => env('DB_CONNECTION', 'mysql'),\n\n'mysql' => [\n    'driver' => 'mysql',\n    'host' => env('DB_HOST'),\n    'port' => env('DB_PORT'),\n    'database' => env('DB_DATABASE'),\n    'username' => env('DB_USERNAME'),\n    'password' => env('DB_PASSWORD'),\n    'prefix' => '',\n],\n\n// ... otherthing\n\n```\n\n<hr>\n\n# 二、migrate 初体验\n\nLaravel 最强大工具之一：**migration**\n\n如果对 `migration` 的概念不清晰，可以简单理解为数据库的版本控制工具。有了它我们就可以对数据库进行方便的管理和愉快地开发了。\n\n\n找到 `\\database\\migrations\\`，可以看到Laravel默认帮我们准备了两个 migrations 示例文件。\n\n![migrations 示例文件](laravel-migration/1.png)\n\n我们就来学习和使用一下 `2014_10_12_000000_create_users_table.php` 文件：\n\n```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n}\n\n```\n\n代码说明：\n- up： 负责创建一个 `users` 表；\n- down： 为了避免重复新建，负责删除 `users` 表，**但这也说明每次执行都会清空该表的数据**；\n\n\n\n```bash\n$ php artisan migrate\n```\n\n![successfully！！！](laravel-migration/2.png)\n\n![Navicat for MySql](laravel-migration/3.png)\n\n<hr>\n\n# 三、创建 migration 文件\n\n刚刚我们使用了 Laravel 示例的 migration 文件，现在我们新建一个自己的文章表 `articles`，依然可以通过 `artisan` 命令来创建：\n\n```bash\n$ php artisan make:migration create-articles_table --create=articles\n```\n\n![Created Migration successfully](laravel-migration/4.png)\n\n![2019_01_20_042528_create-articles_table](laravel-migration/5.png)\n\n自动生成文件 `\\database\\migrations\\2019_01_20_042528_create-articles_table.php `，代码如下：\n\n```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateArticlesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('articles', function (Blueprint $table) {\n            $table->increments('id');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('articles');\n    }\n}\n\n```\n\n其中 `$table->timestamps();` 建议保留，Laravel 会自动创建并维护 `created_at` 和 `updated_at` 字段。\n\n我们试着添加一些基本字段，代码如下：\n\n```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateArticlesTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('articles', function (Blueprint $table) {\n            $table->increments('id');\n            $table->string('title');\n            $table->text('content');\n            $table->timestamp('published_at');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('articles');\n    }\n}\n\n```\n\n再次执行 migrate 命令 \n\n```bash\nphp artisan migrate\n```\n\n![New DataTable articles](laravel-migration/6.png)\n\n<hr>\n\n# 四、添加字段\n\n假设我们现在需要为 `articles` 表添加一个简介字段 `intro`。\n\n```bash\n$ php artisan make:migration add_intro_column_to_articles --table=articles\n```\n\n`\\database\\migrations\\2019_01_20_060259_add_intro_column_to_articles.php` 默认代码如下：\n\n```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddIntroColumnToArticles extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('articles', function (Blueprint $table) {\n            //\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('articles', function (Blueprint $table) {\n            //\n        });\n    }\n}\n```\n\n添加代码：\n\n```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass AddIntroColumnToArticles extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('articles', function (Blueprint $table) {\n            $table->string('introl');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('articles', function (Blueprint $table) {\n            $table->dropColumn('introl');\n        });\n    }\n}\n```\n\n又又又执行命令： `$ php artisan migrate`\n\n刷新数据表 `articles` ，成功添加了 `introl` 字段：\n\n![Add Column introl](laravel-migration/7.png)\n\n事实上，如果真的要执行 `$table->dropColumn` 需要依赖一个第三方包，这里安装一下吧：\n\n```bash\n$ composer require doctrine/dbal\n```","tags":["php","laravel"],"categories":["php","laravel"]},{"title":"Laravel 入门示例（三）：常用的blade语法","url":"/2019/01/20/laravel-demo3/","content":"\n# @yield 语法\n\n中文理解为区域，在母版页（layouts）中会使用。类似 Vue 中的 `<slot name='content'>` 标签。 \n\n新建 **\\resources\\views\\layouts\\app.blade.php**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/twitter-bootstrap/3.3.6/css/bootstrap.min.css\">\n    <script src=\"https://cdn.bootcss.com/twitter-bootstrap/3.3.6/js/bootstrap.min.js\"></script>\n</head>\n<body>\n    @yield('content')\n</body>\n</html>\n```\n\n\\resources\\views\\sites\\about.blade.php\n\n```html\n@extends('layouts/app')\n@section('content')\n    <h1>about me {{$first}} {{$last}}</h1>\n@stop\n```\n\n### 语法说明：\n- **@extends**：继承 `\\resources\\views\\layouts\\app.blade.php` 模板；\n- **@section**：将内容填充到 `@yield('content')` 中；\n- **@stop**：通常一个 `@section` 对应一个 `$stop`；\n\n可以发现 **bootstrap** 的样式起到效果了：\n\n![](laravel-demo3/1.png)\n\n<hr>\n\n# 特定的页面加载特定的js文件\n\n其实非常简单，只需要在 `layouts` 中新增多个@yield，在特定的页面选择性填充这个区域即可。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/twitter-bootstrap/3.3.6/css/bootstrap.min.css\">\n    <script src=\"https://cdn.bootcss.com/twitter-bootstrap/3.3.6/js/bootstrap.min.js\"></script>\n</head>\n<body>\n    @yield('content')\n    @yield('footer')\n</body>\n</html>\n```\n\n```html\n@extends('layouts/app')\n@section('content')\n    <h1>about me {{$first}} {{$last}}</h1>\n@stop\n\n@section('footer')\n    <script>alert('yesh！！')</script>\n@stop\n```\n\n![](laravel-demo3/2.png)\n\n<hr>\n\n# @if 语法\n```html\n@extends('layouts/app')\n@section('content')\n    @if ($first == \"Zhou\")\n        <h1>about me {{$first}} {{$last}}</h1>\n    @else\n        <h2>nothing</h2>\n    @endif\n@stop\n```\n\n<hr>\n\n# @foreach 语法\n\n先在控制器中导出数组 \n\n\\app\\Http\\Controllers\\SitesController.php\n\n```php\npublic function about () {\n    $people = ['Taylor Otwell', 'Jeffray Way', 'Happy Petter'];\n    return view('sites/about', compact('people'));\n}\n```\n\n通常 @foreach 会结合 @if 使用，否则会出现多余的html标签的情况\n\n```html\n@extends('layouts/app')\n@section('content')\n    @if (count($people) > 0)\n        <ul>\n            @foreach ($people as $p)\n                <li>{{ $p }}</li>\n            @endforeach\n        </ul>\n    @endif\n@stop\n```\n\n![](laravel-demo3/3.png)","tags":["php","laravel"],"categories":["php","laravel"]},{"title":"Laravel 入门示例（二）：初识控制器与视图","url":"/2019/01/19/laravel-demo2/","content":"\n1、新建 **resources\\views\\sites\\about.blade.php**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <h1>about me</h1>\n</body>\n</html>\n```\n\n2、新增 **about** 路由\n\n\\routes\\web.php\n\n```php\n<?php\n\nRoute::get('/', 'SitesController@index');\n\nRoute::get('/about', 'SitesController@about');\n```\n\n3、控制器新增 **about** 方法\n\n\\app\\Http\\Controllers\\SitesController.php\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass SitesController extends Controller\n{\n    // Route::get('/', 'SitesController@index');\n    public function index () {\n        return view('welcome');\n    }\n\n    // Route::get('/about', 'SitesController@about');\n    public function about () {\n        return view('sites.about');\n    }\n}\n```\n\n要访问 **resources/views/sites/about.blade.php** 页面，可以有两种方式：\n- return view('sites/about');\n- return view('sites.about'); **（推荐）**\n\n访问 [http://127.0.0.1:8000/about](http://127.0.0.1:8000/about)，效果如图所示：\n\n![](laravel-demo2/1.png)\n\n<hr>\n\n# 向视图传递变量\n\n1、 **with()** 与 原生渲染\n\n```php\npublic function about () {\n    $name = 'Lee';\n    return view('sites/about')->with('name', $name);\n}\n```\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <h1>about me <?= $name; ?></h1>\n</body>\n</html>\n```\n\n2、 使用 **blade** 模板引擎语法来渲染\n\n我们注意到视图文件都是 **.blade.php** 文件，所以理所应当使用更简洁的模板渲染语法。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <h1>about me {{ $name }}</h1>\n</body>\n</html>\n```\n\n**{!! $name !!}** 的语法可以用来解析html。譬如 $name 的值为 `<span style='color: red'> Lee </span>` 时，但要小心xss 攻击！\n\n![](laravel-demo2/2.png)\n\n\n3、使用数组传递多个变量\n\n```php\npublic function about () {\n    return view('sites/about')->with([\n        'first' => 'Lee',\n        'last' => 'Mp'\n    ]);\n}\n```\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <h1>about me {{$first}} {{$last}}</h1>\n</body>\n</html>\n```\n\n4、类 yii 的传递方式\n```php\npublic function about () {\n    $data = [];\n    $data['first'] = 'Lee';\n    $data['last'] = 'Mp';\n    return view('sites/about', $data);\n}\n```\n\n5、 **compact** 方式**（推荐）**\n```php\npublic function about () {\n    $first = 'Lee';\n    $last = 'Mp';\n    return view('sites/about', compact('first', 'last'));\n}\n```\n\n![](laravel-demo2/3.png)","tags":["php","laravel"],"categories":["php","laravel"]},{"title":"Laravel 入门示例（一）：初识控制器与路由","url":"/2019/01/19/laravel-demo1/","content":"\n1、先用 **artisan** 命令新建一个 **Controller**，命名为 **SitesController**\n\n```bash\n$ php artisan make:controller SitesController\n```\n\n生成的文件在目录： **\\app\\Http\\Controllers\\SitesController.php**，添加内容如下：\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass SitesController extends Controller\n{\n    // Route::get('/', 'SitesController@index');\n    public function index () {\n    \treturn view('welcome');\n    }\n}\n\n\n```\n\n这里的 welcome 页面是在：**\\resources\\views\\welcome.blade.php**\n\n2、打开 **\\routes\\web.php**，修改内容为：\n\n```php\n<?php\n\n// Route::get('/', function () {\n//     return view('welcome');\n// });\n\nRoute::get('/', 'SitesController@index');\n```\n\n刷新页面，一切如故。 ","tags":["php","laravel"],"categories":["php","laravel"]},{"title":"laravel 安装与启动","url":"/2019/01/19/laravel安装与启动/","content":"\n## 1、使用 composer 安装 laravel\n\n[https://packagist.org/packages/laravel/laravel](https://packagist.org/packages/laravel/laravel)\n\n```bash\n$ composer create-project laravel/laravel laravel5\n```\n\n&#8195;&#8195;\n\n## 2、启动 laravel\n\n##### 方式一：php 内置服务器\n\n指定 public 文件夹即可\n\n```bash\n$ php -S localhost:8000 -t public\n```\n\n##### 方式二：使用laravel提供的命令行工具artisan\n\n```bash\n$ php artisan serve\n```\n\n![](laravel-start/2.png)\n\n预览 [http://localhost:8000](http://localhost:8000) ，效果如下：\n\n![](laravel-start/1.png)","tags":["php","laravel"],"categories":["php","laravel"]},{"title":"hexo插入本地图片","url":"/2019/01/19/hexo插入本地图片/","content":"\n安装 [hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n\n```bash\n$ cnpm install hexo-asset-image --save\n```\n\n**_config.yml** 开启 **post_asset_folder: true**\n\n```yaml\npost_asset_folder: true\n```\n\n完成安装后用hexo新建文章的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。\n\n![](hexo插入本地图片/3.png)\n\n只需要使用该语句即可插入图片\n\n```\n![](test-img/1.png)\n```","tags":["hexo"],"categories":["hexo"]},{"title":"composer疑难杂症","url":"/2019/01/19/composer疑难杂症/","content":"\n## The openssl extension is required for SSL/TLS protection\n\n![](composer疑难杂症/1.png)\n\n解决方法：在php.ini文件中打开php_openssl扩展 \n\n```\nextension=php_openssl.dll\n```","tags":["php","cpmposer"],"categories":["cpmposer"]}]